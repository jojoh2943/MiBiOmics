colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_CEI_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
#### CLP CEI
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLP <- annot[which(rownames(annot) %in% colnames(CLP_CEI_filt)),]
annot_CLP <- annot_CLP[order(rownames(annot_CLP)),]
annot_CLP$CONDITION <- as.factor(as.character(annot_CLP$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLP_CEI_filt),
colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_CEI_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
res$CT_ST[which(res$CT_ST$padj < 0.05),]
res_CLP_CEI <- res$CT_ST
#### CLP LUM
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLP <- annot[which(rownames(annot) %in% colnames(CLP_LUM_filt)),]
annot_CLP <- annot_CLP[order(rownames(annot_CLP)),]
annot_CLP$CONDITION <- as.factor(as.character(annot_CLP$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLP_LUM_filt),
colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_LUM_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
res$CT_ST[which(res$CT_ST$padj < 0.05),]
res_CLP_LUM <- res$CT_ST
rownames(res$CT_LT[which(res$CT_LT$padj < 0.05),])
rownames(res$CT_LT)[which(res$CT_LT$padj < 0.05),]
A <- as.data.frame(res$CT_LT[which(res$CT_LT$padj < 0.05),])
taxAnnot[A,]
taxAnnot[rownames(A),]
A
A <- as.data.frame(res$CT_LS[which(res$CT_LS$padj < 0.05),])
A <- as.data.frame(res$CT_LS[which(res$CT_ST$padj < 0.05),])
A <- as.data.frame(res$CT_ST[which(res$CT_ST$padj < 0.05),])
rownames(A)
taxAnno[rownames(A),]
taxAnnot[rownames(A),]
res$CT_ST[which(res$CT_ST$padj < 0.05),]
library(ggplot2)
library(omicade4)
library(compositions)
#### FILE UPLOAD ####
source("C:/Users/Boulot/Documents/These/myFunctions.R")
transcriptomic <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_T_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_metadata.csv", header = TRUE, row.names = 1, sep =",", check.names = FALSE)
taxAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/tax_annotation_DS.csv", header = TRUE, row.names = 1, sep=",", check.names = FALSE)
OTU_CLPLUM <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_LUM_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
OTU_CLPCEI <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_CEI_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata$FC_weight <- (metadata$Weight.D14 - metadata$Weight.D0)/ metadata$Weight.D0
metadata$FC_ASF.in.vivo <- (metadata$ASF.permea.in.vivo.D14 - metadata$ASF.permea.in.vivo.D0)/ metadata$ASF.permea.in.vivo.D0
metadata$FC_HRP.in.vivo <- (metadata$HRP.permea.in.vivo.D14 - metadata$HRP.permea.in.vivo.D0)/ metadata$HRP.permea.in.vivo.D0
metadata$FC_transit.colon <- (metadata$Transit.colon.D14 - metadata$Transit.colon.D0)/ metadata$Transit.colon.D0
metadata$FC_transit.total <- (metadata$Transit.global.D10 - metadata$Transit.global.D0)/ metadata$Transit.global.D10
metadata$FC_feces.weight.fresh <- (metadata$Feces.weight.fresh.D10 - metadata$Feces.weight.fresh.D0)/ metadata$Feces.weight.fresh.D0
metadata$FC_feces.weight.dry <- (metadata$Feces.weight.dry.D10 - metadata$Feces.weight.dry.D0)/ metadata$Feces.weight.dry.D0
metadata$FC_feces.humidity <- (metadata$Feces.humidity.D10 - metadata$Feces.humidity.D0)/ metadata$Feces.humidity.D0
transcriptomic <- transcriptomic[,order(colnames(transcriptomic))]
OTU_CLPLUM <- OTU_CLPLUM[,order(colnames(OTU_CLPLUM))]
OTU_CLPCEI <- OTU_CLPCEI[,order(colnames(OTU_CLPCEI))]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPCEI <- OTU_CLPCEI[, grepl(pattern = "CT", colnames(OTU_CLPCEI))]
OTU_CLPLUM <- OTU_CLPLUM[, grepl(pattern = "CT", colnames(OTU_CLPLUM))]
transcriptomic <- transcriptomic[, grepl(pattern = "CT", colnames(transcriptomic))]
metadata <- metadata[grepl("CT", rownames(metadata)),]
# OTU_CLPCEI_ST <- OTU_CLPCEI[, grepl(pattern = "ST", colnames(OTU_CLPCEI))]
# OTU_CLPLUM_ST <- OTU_CLPLUM[, grepl(pattern = "ST", colnames(OTU_CLPLUM))]
# transcriptomic_ST <- transcriptomic[, grepl(pattern = "ST", colnames(transcriptomic))]
#
# metadata_ST <- metadata[grepl("ST", rownames(metadata)),]
# OTU_CLPCEI <- cbind(OTU_CLPCEI_CT, OTU_CLPCEI_ST)
# OTU_CLPLUM <- cbind(OTU_CLPLUM_CT, OTU_CLPLUM_ST)
# transcriptomic <- cbind(transcriptomic_CT, transcriptomic_ST)
# metadata <- rbind(metadata_CT, metadata_ST)
metadata <- metadata[which(rownames(metadata) %in% colnames(OTU_CLPCEI)),]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPLUM_filtrated <- filtr_prev(OTU_CLPLUM, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPCEI_filtrated <- filtr_prev(OTU_CLPCEI, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPLUM_normalized <- apply(OTU_CLPLUM_filtrated, 1, TSS.divide)
OTU_CLPCEI_normalized <- apply(OTU_CLPCEI_filtrated, 1, TSS.divide)
OTU_CLPLUM_transformed = as.data.frame(t(clr(OTU_CLPLUM_normalized)))
OTU_CLPCEI_transformed = as.data.frame(t(clr(OTU_CLPCEI_normalized)))
transcriptomic_normalized <- apply(transcriptomic, 1, TSS.divide)
transcriptomic_normalized_transformed <- as.data.frame(t(clr(transcriptomic_normalized)))
transcriptomic_transformed <- as.data.frame(clr(transcriptomic))
rownames(transcriptomic_normalized_transformed) <- paste("A_", rownames(transcriptomic_normalized_transformed), sep = "")
rownames(OTU_CLPCEI_transformed) <- paste("B_", rownames(OTU_CLPCEI_transformed), sep = "")
rownames(OTU_CLPLUM_transformed) <- paste("C_", rownames(OTU_CLPLUM_transformed), sep = "")
# PERFORM MCOA (Multiple co_inertia analysis)
My3Layers <- list(transcriptomic_normalized_transformed, OTU_CLPCEI_transformed, OTU_CLPLUM_transformed)
mcoa_CLP <- mcia(My3Layers,cia.scan = TRUE, cia.nf = 2)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$HRP.permea.ex.vivo.CP, sample.lab=FALSE)
RV <- round(mean(mcoa_CLP$mcoa$RV), digits = 2)
library(ggplot2)
library(omicade4)
library(compositions)
#### FILE UPLOAD ####
source("C:/Users/Boulot/Documents/These/myFunctions.R")
transcriptomic <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_T_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_metadata.csv", header = TRUE, row.names = 1, sep =",", check.names = FALSE)
taxAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/tax_annotation_DS.csv", header = TRUE, row.names = 1, sep=",", check.names = FALSE)
OTU_CLPLUM <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_LUM_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
OTU_CLPCEI <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_CEI_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata$FC_weight <- (metadata$Weight.D14 - metadata$Weight.D0)/ metadata$Weight.D0
metadata$FC_ASF.in.vivo <- (metadata$ASF.permea.in.vivo.D14 - metadata$ASF.permea.in.vivo.D0)/ metadata$ASF.permea.in.vivo.D0
metadata$FC_HRP.in.vivo <- (metadata$HRP.permea.in.vivo.D14 - metadata$HRP.permea.in.vivo.D0)/ metadata$HRP.permea.in.vivo.D0
metadata$FC_transit.colon <- (metadata$Transit.colon.D14 - metadata$Transit.colon.D0)/ metadata$Transit.colon.D0
metadata$FC_transit.total <- (metadata$Transit.global.D10 - metadata$Transit.global.D0)/ metadata$Transit.global.D10
metadata$FC_feces.weight.fresh <- (metadata$Feces.weight.fresh.D10 - metadata$Feces.weight.fresh.D0)/ metadata$Feces.weight.fresh.D0
metadata$FC_feces.weight.dry <- (metadata$Feces.weight.dry.D10 - metadata$Feces.weight.dry.D0)/ metadata$Feces.weight.dry.D0
metadata$FC_feces.humidity <- (metadata$Feces.humidity.D10 - metadata$Feces.humidity.D0)/ metadata$Feces.humidity.D0
transcriptomic <- transcriptomic[,order(colnames(transcriptomic))]
OTU_CLPLUM <- OTU_CLPLUM[,order(colnames(OTU_CLPLUM))]
OTU_CLPCEI <- OTU_CLPCEI[,order(colnames(OTU_CLPCEI))]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPCEI <- OTU_CLPCEI[, grepl(pattern = "CT", colnames(OTU_CLPCEI))]
OTU_CLPLUM <- OTU_CLPLUM[, grepl(pattern = "CT", colnames(OTU_CLPLUM))]
transcriptomic <- transcriptomic[, grepl(pattern = "CT", colnames(transcriptomic))]
metadata <- metadata[grepl("CT", rownames(metadata)),]
# OTU_CLPCEI_ST <- OTU_CLPCEI[, grepl(pattern = "ST", colnames(OTU_CLPCEI))]
# OTU_CLPLUM_ST <- OTU_CLPLUM[, grepl(pattern = "ST", colnames(OTU_CLPLUM))]
# transcriptomic_ST <- transcriptomic[, grepl(pattern = "ST", colnames(transcriptomic))]
#
# metadata_ST <- metadata[grepl("ST", rownames(metadata)),]
# OTU_CLPCEI <- cbind(OTU_CLPCEI_CT, OTU_CLPCEI_ST)
# OTU_CLPLUM <- cbind(OTU_CLPLUM_CT, OTU_CLPLUM_ST)
# transcriptomic <- cbind(transcriptomic_CT, transcriptomic_ST)
# metadata <- rbind(metadata_CT, metadata_ST)
metadata <- metadata[which(rownames(metadata) %in% colnames(OTU_CLPCEI)),]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPLUM_filtrated <- filtr_prev(OTU_CLPLUM, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPCEI_filtrated <- filtr_prev(OTU_CLPCEI, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPLUM_normalized <- apply(OTU_CLPLUM_filtrated, 1, TSS.divide)
OTU_CLPCEI_normalized <- apply(OTU_CLPCEI_filtrated, 1, TSS.divide)
OTU_CLPLUM_transformed = as.data.frame(t(clr(OTU_CLPLUM_normalized)))
OTU_CLPCEI_transformed = as.data.frame(t(clr(OTU_CLPCEI_normalized)))
transcriptomic_normalized <- apply(transcriptomic, 1, TSS.divide)
transcriptomic_normalized_transformed <- as.data.frame(t(clr(transcriptomic_normalized)))
transcriptomic_transformed <- as.data.frame(clr(transcriptomic))
rownames(transcriptomic_normalized_transformed) <- paste("A_", rownames(transcriptomic_normalized_transformed), sep = "")
rownames(OTU_CLPCEI_transformed) <- paste("B_", rownames(OTU_CLPCEI_transformed), sep = "")
rownames(OTU_CLPLUM_transformed) <- paste("C_", rownames(OTU_CLPLUM_transformed), sep = "")
# PERFORM MCOA (Multiple co_inertia analysis)
My3Layers <- list(transcriptomic_normalized_transformed, OTU_CLPCEI_transformed, OTU_CLPLUM_transformed)
mcoa_CLP <- mcia(My3Layers,cia.scan = TRUE, cia.nf = 2)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$HRP.permea.ex.vivo.CP, sample.lab=FALSE)
RV <- round(mean(mcoa_CLP$mcoa$RV), digits = 2)
library(ggplot2)
library(omicade4)
library(compositions)
#### FILE UPLOAD ####
source("C:/Users/Boulot/Documents/These/myFunctions.R")
transcriptomic <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_T_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_metadata.csv", header = TRUE, row.names = 1, sep =",", check.names = FALSE)
taxAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/tax_annotation_DS.csv", header = TRUE, row.names = 1, sep=",", check.names = FALSE)
OTU_CLPLUM <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_LUM_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
OTU_CLPCEI <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_CEI_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata$FC_weight <- (metadata$Weight.D14 - metadata$Weight.D0)/ metadata$Weight.D0
metadata$FC_ASF.in.vivo <- (metadata$ASF.permea.in.vivo.D14 - metadata$ASF.permea.in.vivo.D0)/ metadata$ASF.permea.in.vivo.D0
metadata$FC_HRP.in.vivo <- (metadata$HRP.permea.in.vivo.D14 - metadata$HRP.permea.in.vivo.D0)/ metadata$HRP.permea.in.vivo.D0
metadata$FC_transit.colon <- (metadata$Transit.colon.D14 - metadata$Transit.colon.D0)/ metadata$Transit.colon.D0
metadata$FC_transit.total <- (metadata$Transit.global.D10 - metadata$Transit.global.D0)/ metadata$Transit.global.D10
metadata$FC_feces.weight.fresh <- (metadata$Feces.weight.fresh.D10 - metadata$Feces.weight.fresh.D0)/ metadata$Feces.weight.fresh.D0
metadata$FC_feces.weight.dry <- (metadata$Feces.weight.dry.D10 - metadata$Feces.weight.dry.D0)/ metadata$Feces.weight.dry.D0
metadata$FC_feces.humidity <- (metadata$Feces.humidity.D10 - metadata$Feces.humidity.D0)/ metadata$Feces.humidity.D0
transcriptomic <- transcriptomic[,order(colnames(transcriptomic))]
OTU_CLPLUM <- OTU_CLPLUM[,order(colnames(OTU_CLPLUM))]
OTU_CLPCEI <- OTU_CLPCEI[,order(colnames(OTU_CLPCEI))]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPCEI <- OTU_CLPCEI[, grepl(pattern = "CT", colnames(OTU_CLPCEI))]
OTU_CLPLUM <- OTU_CLPLUM[, grepl(pattern = "CT", colnames(OTU_CLPLUM))]
transcriptomic <- transcriptomic[, grepl(pattern = "CT", colnames(transcriptomic))]
metadata <- metadata[grepl("CT", rownames(metadata)),]
# OTU_CLPCEI_ST <- OTU_CLPCEI[, grepl(pattern = "ST", colnames(OTU_CLPCEI))]
# OTU_CLPLUM_ST <- OTU_CLPLUM[, grepl(pattern = "ST", colnames(OTU_CLPLUM))]
# transcriptomic_ST <- transcriptomic[, grepl(pattern = "ST", colnames(transcriptomic))]
#
# metadata_ST <- metadata[grepl("ST", rownames(metadata)),]
# OTU_CLPCEI <- cbind(OTU_CLPCEI_CT, OTU_CLPCEI_ST)
# OTU_CLPLUM <- cbind(OTU_CLPLUM_CT, OTU_CLPLUM_ST)
# transcriptomic <- cbind(transcriptomic_CT, transcriptomic_ST)
# metadata <- rbind(metadata_CT, metadata_ST)
metadata <- metadata[which(rownames(metadata) %in% colnames(OTU_CLPCEI)),]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPLUM_filtrated <- filtr_prev(OTU_CLPLUM, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPCEI_filtrated <- filtr_prev(OTU_CLPCEI, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPLUM_normalized <- apply(OTU_CLPLUM_filtrated, 1, TSS.divide)
OTU_CLPCEI_normalized <- apply(OTU_CLPCEI_filtrated, 1, TSS.divide)
OTU_CLPLUM_transformed = as.data.frame(t(clr(OTU_CLPLUM_normalized)))
OTU_CLPCEI_transformed = as.data.frame(t(clr(OTU_CLPCEI_normalized)))
transcriptomic_normalized <- apply(transcriptomic, 1, TSS.divide)
transcriptomic_normalized_transformed <- as.data.frame(t(clr(transcriptomic_normalized)))
transcriptomic_transformed <- as.data.frame(clr(transcriptomic))
rownames(transcriptomic_normalized_transformed) <- paste("A_", rownames(transcriptomic_normalized_transformed), sep = "")
rownames(OTU_CLPCEI_transformed) <- paste("B_", rownames(OTU_CLPCEI_transformed), sep = "")
rownames(OTU_CLPLUM_transformed) <- paste("C_", rownames(OTU_CLPLUM_transformed), sep = "")
# PERFORM MCOA (Multiple co_inertia analysis)
My3Layers <- list(transcriptomic_normalized_transformed, OTU_CLPCEI_transformed, OTU_CLPLUM_transformed)
mcoa_CLP <- mcia(My3Layers,cia.scan = TRUE, cia.nf = 2)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$ASF.permea.ex.vivo.CD, sample.lab=FALSE)
RV <- round(mean(mcoa_CLP$mcoa$RV), digits = 2)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$Weight.D14, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$HRP.permea.ex.vivo.CD, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$ASF.permea.ex.vivo.CD, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$CORTICOSTERONE, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$ASF.permea.in.vivo.D14, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$HRP.permea.in.vivo.D14, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$Transit.colon.D14, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_feces.humidity, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$Shannon, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_ASF.in.vivo, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_transit.colon, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$ADN, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_HRP.in.vivo, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_feces.weight.fresh, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_feces.humidity, sample.lab=FALSE)
plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_transit.total, sample.lab=FALSE)
library(clusterProfiler)
print(plot_mcoa_3(mcoa_CLP,
metadata, "ASF.permea.in.vivo.D14",
df2_isOTU = TRUE,
df3_isOTU = TRUE,
taxAnnot = taxAnnot, taxonomic_range = "Class",
names_df1 = rownames(transcriptomic),
names_df2 = rownames(OTU_CLPCEI_transformed),
names_df3 = rownames(OTU_CLPLUM_transformed),
axis_drivers = 2,
title = paste("Colon Proximal : Control interactome", RV, sep = ""),
type_df1 = "Transcriptomic",
type_df2 = "Adherent Microbiota",
type_df3 = "Luminal Microbiota",
showDriver = FALSE,
drivers_threshold = 0.05,
addRelAb = TRUE,
extractGOCSV = TRUE,
addENRICHAnnot = "GO"))
library(clusterProfiler)
print(plot_mcoa_3(mcoa_CLP,
metadata, "ASF.permea.in.vivo.D14",
df2_isOTU = TRUE,
df3_isOTU = TRUE,
taxAnnot = taxAnnot, taxonomic_range = "Class",
names_df1 = rownames(transcriptomic),
names_df2 = rownames(OTU_CLPCEI_transformed),
names_df3 = rownames(OTU_CLPLUM_transformed),
axis_drivers = 2,
title = paste("Colon Proximal : Control interactome", RV, sep = ""),
type_df1 = "Transcriptomic",
type_df2 = "Adherent Microbiota",
type_df3 = "Luminal Microbiota",
showDriver = FALSE,
drivers_threshold = 0.05,
addRelAb = TRUE,
extractGOCSV = TRUE,
addENRICHAnnot = "GO"))
library(ggplot2)
library(omicade4)
library(compositions)
#### FILE UPLOAD ####
source("C:/Users/Boulot/Documents/These/myFunctions.R")
transcriptomic <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_T_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_metadata.csv", header = TRUE, row.names = 1, sep =",", check.names = FALSE)
taxAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/tax_annotation_DS.csv", header = TRUE, row.names = 1, sep=",", check.names = FALSE)
OTU_CLPLUM <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_LUM_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
OTU_CLPCEI <- read.csv("C:/Users/Boulot/Documents/These/preprojet/integration/data/COMMON_CLP_CEI_EXPRDAT_RAW.csv", header = TRUE, row.names = 1, sep = ",", check.names = FALSE)
metadata$FC_weight <- (metadata$Weight.D14 - metadata$Weight.D0)/ metadata$Weight.D0
metadata$FC_ASF.in.vivo <- (metadata$ASF.permea.in.vivo.D14 - metadata$ASF.permea.in.vivo.D0)/ metadata$ASF.permea.in.vivo.D0
metadata$FC_HRP.in.vivo <- (metadata$HRP.permea.in.vivo.D14 - metadata$HRP.permea.in.vivo.D0)/ metadata$HRP.permea.in.vivo.D0
metadata$FC_transit.colon <- (metadata$Transit.colon.D14 - metadata$Transit.colon.D0)/ metadata$Transit.colon.D0
metadata$FC_transit.total <- (metadata$Transit.global.D10 - metadata$Transit.global.D0)/ metadata$Transit.global.D10
metadata$FC_feces.weight.fresh <- (metadata$Feces.weight.fresh.D10 - metadata$Feces.weight.fresh.D0)/ metadata$Feces.weight.fresh.D0
metadata$FC_feces.weight.dry <- (metadata$Feces.weight.dry.D10 - metadata$Feces.weight.dry.D0)/ metadata$Feces.weight.dry.D0
metadata$FC_feces.humidity <- (metadata$Feces.humidity.D10 - metadata$Feces.humidity.D0)/ metadata$Feces.humidity.D0
transcriptomic <- transcriptomic[,order(colnames(transcriptomic))]
OTU_CLPLUM <- OTU_CLPLUM[,order(colnames(OTU_CLPLUM))]
OTU_CLPCEI <- OTU_CLPCEI[,order(colnames(OTU_CLPCEI))]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPCEI <- OTU_CLPCEI[, grepl(pattern = "CT", colnames(OTU_CLPCEI))]
OTU_CLPLUM <- OTU_CLPLUM[, grepl(pattern = "CT", colnames(OTU_CLPLUM))]
transcriptomic <- transcriptomic[, grepl(pattern = "CT", colnames(transcriptomic))]
metadata <- metadata[grepl("CT", rownames(metadata)),]
# OTU_CLPCEI_ST <- OTU_CLPCEI[, grepl(pattern = "ST", colnames(OTU_CLPCEI))]
# OTU_CLPLUM_ST <- OTU_CLPLUM[, grepl(pattern = "ST", colnames(OTU_CLPLUM))]
# transcriptomic_ST <- transcriptomic[, grepl(pattern = "ST", colnames(transcriptomic))]
#
# metadata_ST <- metadata[grepl("ST", rownames(metadata)),]
# OTU_CLPCEI <- cbind(OTU_CLPCEI_CT, OTU_CLPCEI_ST)
# OTU_CLPLUM <- cbind(OTU_CLPLUM_CT, OTU_CLPLUM_ST)
# transcriptomic <- cbind(transcriptomic_CT, transcriptomic_ST)
# metadata <- rbind(metadata_CT, metadata_ST)
metadata <- metadata[which(rownames(metadata) %in% colnames(OTU_CLPCEI)),]
metadata <- metadata[order(rownames(metadata)),]
OTU_CLPLUM_filtrated <- filtr_prev(OTU_CLPLUM, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPCEI_filtrated <- filtr_prev(OTU_CLPCEI, 1, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLPLUM_normalized <- apply(OTU_CLPLUM_filtrated, 1, TSS.divide)
OTU_CLPCEI_normalized <- apply(OTU_CLPCEI_filtrated, 1, TSS.divide)
OTU_CLPLUM_transformed = as.data.frame(t(clr(OTU_CLPLUM_normalized)))
OTU_CLPCEI_transformed = as.data.frame(t(clr(OTU_CLPCEI_normalized)))
transcriptomic_normalized <- apply(transcriptomic, 1, TSS.divide)
transcriptomic_normalized_transformed <- as.data.frame(t(clr(transcriptomic_normalized)))
transcriptomic_transformed <- as.data.frame(clr(transcriptomic))
rownames(transcriptomic_normalized_transformed) <- paste("A_", rownames(transcriptomic_normalized_transformed), sep = "")
rownames(OTU_CLPCEI_transformed) <- paste("B_", rownames(OTU_CLPCEI_transformed), sep = "")
rownames(OTU_CLPLUM_transformed) <- paste("C_", rownames(OTU_CLPLUM_transformed), sep = "")
# PERFORM MCOA (Multiple co_inertia analysis)
My3Layers <- list(transcriptomic_normalized_transformed, OTU_CLPCEI_transformed, OTU_CLPLUM_transformed)
mcoa_CLP <- mcia(My3Layers,cia.scan = TRUE, cia.nf = 2)
#plot(mcoa_CLP, axes=1:2, phenovec = metadata$FC_transit.total, sample.lab=FALSE)
RV <- round(mean(mcoa_CLP$mcoa$RV), digits = 2)
library(phyloseq)
library(ggstatsplot)
source("C:/Users/Boulot/Documents/These/myFunctions.R")
sampleAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/metadata_diversity_all.csv", sep=",", header = TRUE, row.names = 1)
CLD_CEI_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/CLD_CEI_2743_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
CLP_CEI_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/CLP_CEI_2595_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
ILE_CEI_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/ILE_CEI_1540_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
JEJ_CEI_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/JEJ_CEI_734_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
CLD_LUM_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/CLD_LUM_6885_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
CLP_LUM_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/CLP_LUM_5757_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
ILE_LUM_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/ILE_LUM_2800_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
JEJ_LUM_OTUTable <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/JEJ_LUM_1973_OTU_table_DS.csv", sep = ",", header = TRUE, row.names = 1)
CLD_OTUTable <- cbind(CLD_CEI_OTUTable, CLD_LUM_OTUTable)
CLP_OTUTable <- cbind(CLP_CEI_OTUTable, CLP_LUM_OTUTable)
ILE_OTUTable <- cbind(ILE_CEI_OTUTable, ILE_LUM_OTUTable)
JEJ_OTUTable <- cbind(JEJ_CEI_OTUTable, JEJ_LUM_OTUTable)
CLD_OTUTable_CT <- CLD_OTUTable[,grepl("CT", colnames(CLD_OTUTable))]
CLP_OTUTable_CT <- CLP_OTUTable[,grepl("CT", colnames(CLP_OTUTable))]
ILE_OTUTable_CT <- ILE_OTUTable[,grepl("CT", colnames(ILE_OTUTable))]
JEJ_OTUTable_CT <- JEJ_OTUTable[,grepl("CT", colnames(JEJ_OTUTable))]
CLD_OTUTable_LT <- CLD_OTUTable[,grepl("ST", colnames(CLD_OTUTable))]
CLP_OTUTable_LT <- CLP_OTUTable[,grepl("ST", colnames(CLP_OTUTable))]
ILE_OTUTable_LT <- ILE_OTUTable[,grepl("ST", colnames(ILE_OTUTable))]
JEJ_OTUTable_LT <- JEJ_OTUTable[,grepl("ST", colnames(JEJ_OTUTable))]
OTUTable <- cbind(ILE_OTUTable_CT, ILE_OTUTable_LT, JEJ_OTUTable_CT, JEJ_OTUTable_LT, CLD_OTUTable_CT, CLD_OTUTable_LT, CLP_OTUTable_CT, CLP_OTUTable_LT)
taxAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/tax_annotation_DS.csv", sep = ",", header = TRUE, row.names = 1)
sampleAnnot <- read.csv("C:/Users/Boulot/Documents/These/preprojet/microbiota/data/metadata_diversity_all.csv", sep=",", header = TRUE, row.names = 1)
sampleAnnot <- sampleAnnot[which(rownames(sampleAnnot) %in% colnames(OTUTable)),]
sampleAnnot <- sampleAnnot[order(rownames(sampleAnnot)),]
sampleAnnot$organ_cond <- paste(sampleAnnot$ORGAN, sampleAnnot$CONDITION, sep="_")
OTUTable <- OTUTable[,order(colnames(OTUTable))]
OTUTable <- OTUTable[order(rownames(OTUTable)),]
taxAnnot <- taxAnnot[order(rownames(taxAnnot)),]
colnames(taxAnnot) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
OTU = otu_table(OTUTable, taxa_are_rows = TRUE)
TAX = tax_table(as.matrix(taxAnnot))
SAMPLE = sample_data(sampleAnnot)
physeq = phyloseq(OTU, TAX, SAMPLE)
p <- plot_richness(physeq, x = "ORGAN", color = "CONTENU")
my_data <- p$data[1:129,]
ggstatsplot::grouped_ggbetweenstats(
data = my_data,
x = organ_cond,
y = Simpson.1,
grouping.var = CONTENU,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
sampleAnnot
ggstatsplot::grouped_ggbetweenstats(
data = my_data,
x = organ_cond,
y = Simpson.1,
grouping.var = ORGAN,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
sampleAnnot$ORGAN
sampleAnnot$CONTENU
my_data$ORGAN
my_data$CONTENU
ggstatsplot::grouped_ggbetweenstats(
data = my_data,
x = CONDITION,
y = Simpson.1,
grouping.var = ORGAN,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
my_data$CONDITION
nlevels(my_data$CONDITION)
levels(my_data$CONDITION)
levels(my_data$ORGAN)
levels(my_data$CONTENU)
?factor_trafo
nrow(my_data[which(my_data$CONTENU == "LUM"),])
nrow(my_data[which(my_data$CONTENU == "CEI"),])
my_data2 <- my_data[which(my_data$ORGAN != "JEJ"),]
my_data2
my_data2$ORGAN
my_data2$ORGAN <- as.factor(as.character(my_data2$ORGAN))
my_data2$ORGAN
ggstatsplot::grouped_ggbetweenstats(
data = my_data2,
x = CONDITION,
y = Simpson.1,
grouping.var = ORGAN,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
my_data2$organ_cond
my_data2$organ_contenu <- paste(my_data2$ORGAN, my_data2$CONTENU, sep ="_")
ggstatsplot::grouped_ggbetweenstats(
data = my_data2,
x = CONDITION,
y = Simpson.1,
grouping.var = organ_contenu,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
my_data2[which(my_data2$organ_contenu = "ILE_CEI"),]
my_data2[which(my_data2$organ_contenu == "ILE_CEI"),]
my_data2[which(my_data2$organ_contenu == "ILE_LUM"),]
my_data2[which(my_data2$organ_contenu == "ILE_CEI"),]
my_data2$organ_contenu
my_data2$organ_contenu <- as.factor(my_data2$organ_contenu)
my_data2$organ_contenu
ggstatsplot::grouped_ggbetweenstats(
data = my_data2,
x = CONDITION,
y = Simpson.1,
grouping.var = organ_contenu,
pairwise.comparisons = TRUE,
pairwise.display = "s",
pairwise.annotation = "asterisk", # how do you want to annotate the pairwise comparisons
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
type = "np",
bf.message = TRUE,
title = "Simpson between organs-regions in Control and in probiotic individuals",
var.equal = TRUE,
messages = FALSE)
shiny::runApp('Docker_MiBiOmics/MiBiOmics')
runApp('Docker_MiBiOmics/MiBiOmics')
runApp('Docker_MiBiOmics/MiBiOmics')
runApp('Docker_MiBiOmics/MiBiOmics')
runApp('Docker_MiBiOmics/MiBiOmics')
runApp('Docker_MiBiOmics/MiBiOmics')
