down <- palette12[2] # blue
downBg <- palette12[1] # light blue
up <- palette12[8] # orange
upBg <- palette12[7] # light orange
none <- "grey75"
# Count genes
ngenes <- nrow(expr)
# Clean dataset
df <- filter(expr, !is.na(padj))
# Generate labels for significant genes only
df <- cbind(df, label = ifelse(df$DE != "NONE", df$Name, ""))
# limiting number of displayed genes
df <- df[order(abs(df$padj)),]
df[GenesInFig+1:nrow(df),]$label <- ""
dfLabels <- subset(df, label != "")
# Clean dataset again else warning and wrong x-axis limits
df <- filter(df, !is.na(padj))
if (scale_y_log){
p <- ggplot(data=df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(size = 1, aes(color = DE)) +
annotate("rect", xmin=logFCthreshold, xmax=Inf, ymin=-log10(AdjPValthreshold), ymax=Inf, fill=upBg, alpha=0.1) +
annotate("rect", xmin = -Inf, xmax = -logFCthreshold, ymin = -log10(AdjPValthreshold), ymax = Inf, fill=downBg, alpha=0.1) +
geom_hline(aes(yintercept=-log10(AdjPValthreshold))) +
geom_vline(aes(xintercept=logFCthreshold)) +
geom_vline(aes(xintercept=-logFCthreshold)) +
ylab("-log10(DEseq padj)") +
xlab("log2(Fold-Change)") +
xlim(min(df$log2FoldChange), max(df$log2FoldChange)) + # correct x-axis limits
scale_color_manual(name="Up-regulated in", # define title in legend
values = list("DOWN" = down, "UP" = up, "NONE" = none), # define color,
labels = list("DOWN" = cond2, "UP" = cond1, "NONE" = "Non significant"), # define text in legend
breaks=c("DOWN", "UP", "NONE")) + # define the order in legend
scale_y_continuous(trans="log2") + # change scale on y axis
ggtitle(paste0("Volcano plot of comparison\n", cond1," (pos FC) vs ", cond2," (neg FC)\nBenjamini & Hochberg method (",nrow(filter(df, DE != "NONE")) ,"/",ngenes," DE genes)")) +
theme_bw() + theme(legend.position="bottom")
#    theme(plot.title = element_text(size=10),
#          axis.title = element_text(size=10))
# put labels when existing
}else{
p <- ggplot(data=df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(size = 1, aes(color = DE)) +
annotate("rect", xmin=logFCthreshold, xmax=Inf, ymin=-log10(AdjPValthreshold), ymax=Inf, fill=upBg, alpha=0.1) +
annotate("rect", xmin = -Inf, xmax = -logFCthreshold, ymin = -log10(AdjPValthreshold), ymax = Inf, fill=downBg, alpha=0.1) +
geom_hline(aes(yintercept=-log10(AdjPValthreshold))) +
geom_vline(aes(xintercept=logFCthreshold)) +
geom_vline(aes(xintercept=-logFCthreshold)) +
ylab("-log10(DEseq padj)") +
xlab("log2(Fold-Change)") +
xlim(min(df$log2FoldChange), max(df$log2FoldChange)) + # correct x-axis limits
scale_color_manual(name="Up-regulated in", # define title in legend
values = list("DOWN" = down, "UP" = up, "NONE" = none), # define color,
labels = list("DOWN" = cond2, "UP" = cond1, "NONE" = "Non significant"), # define text in legend
breaks=c("DOWN", "UP", "NONE")) + # define the order in legend
ggtitle(paste0("Volcano plot of comparison\n", cond1," (pos FC) vs ", cond2," (neg FC)\nBenjamini & Hochberg method (",nrow(filter(df, DE != "NONE")) ,"/",ngenes," DE genes)")) +
theme_bw() + theme(legend.position="bottom")
#    theme(plot.title = element_text(size=10),
#          axis.title = element_text(size=10))
# put labels when existing
}
if (nrow(dfLabels) > 0) {
p <- p + geom_text_repel(
data = dfLabels,
aes(label = label, fontface="italic"),
#size = 2,
#color = "black", # overide scale_color_manual
point.padding = unit(0.1, "lines")
)
}
return(p)
}
#### CLD LUM
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLD <- annot[which(rownames(annot) %in% colnames(CLD_LUM_filt)),]
annot_CLD <- annot_CLD[order(rownames(annot_CLD)),]
annot_CLD$CONDITION <- as.factor(as.character(annot_CLD$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLD_LUM_filt),
colData = annot_CLD,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLD[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLD_LUM_filt[,annot_CLD[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[2]], conditions[[1]], scale_y_log = TRUE)
res_CLD_LUM <- res$CT_ST[which(res$CT_ST$padj < 0.05),]
ggvulcano(resultat, conditions[[2]], conditions[[1]], scale_y_log = FALSE)
#### CLP CEI
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLP <- annot[which(rownames(annot) %in% colnames(CLP_CEI_filt)),]
annot_CLP <- annot_CLP[order(rownames(annot_CLP)),]
annot_CLP$CONDITION <- as.factor(as.character(annot_CLP$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLP_CEI_filt),
colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_CEI_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[2]], conditions[[1]], scale_y_log = FALSE)
#### CLD CEI ####
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLD <- annot[which(rownames(annot) %in% colnames(CLD_CEI_filt)),]
annot_CLD <- annot_CLD[order(rownames(annot_CLD)),]
annot_CLD$CONDITION <- as.factor(as.character(annot_CLD$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLD_CEI_filt),
colData = annot_CLD,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLD[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLD_CEI_filt[,annot_CLD[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = TRUE)
palette12 <- brewer.pal(12, "Paired")
palette12[2]
plot(palette12[2])
ggvulcano <- function(expr, cond1, cond2, logFCthreshold=0, AdjPValthreshold=0.05, GenesInFig=50, scale_y_log = FALSE){
require(RColorBrewer)
require(ggrepel)
require(ggplot2)
require(tidyverse)
# Set colors
#display.brewer.pal(12, "Paired")
palette12 <- brewer.pal(12, "Paired")
up <- palette12[2] # blue
downBg <- palette12[1] # light blue
down <- palette12[8] # orange
upBg <- palette12[7] # light orange
none <- "grey75"
# Count genes
ngenes <- nrow(expr)
# Clean dataset
df <- filter(expr, !is.na(padj))
# Generate labels for significant genes only
df <- cbind(df, label = ifelse(df$DE != "NONE", df$Name, ""))
# limiting number of displayed genes
df <- df[order(abs(df$padj)),]
df[GenesInFig+1:nrow(df),]$label <- ""
dfLabels <- subset(df, label != "")
# Clean dataset again else warning and wrong x-axis limits
df <- filter(df, !is.na(padj))
if (scale_y_log){
p <- ggplot(data=df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(size = 1, aes(color = DE)) +
annotate("rect", xmin=logFCthreshold, xmax=Inf, ymin=-log10(AdjPValthreshold), ymax=Inf, fill=upBg, alpha=0.1) +
annotate("rect", xmin = -Inf, xmax = -logFCthreshold, ymin = -log10(AdjPValthreshold), ymax = Inf, fill=downBg, alpha=0.1) +
geom_hline(aes(yintercept=-log10(AdjPValthreshold))) +
geom_vline(aes(xintercept=logFCthreshold)) +
geom_vline(aes(xintercept=-logFCthreshold)) +
ylab("-log10(DEseq padj)") +
xlab("log2(Fold-Change)") +
xlim(min(df$log2FoldChange), max(df$log2FoldChange)) + # correct x-axis limits
scale_color_manual(name="Up-regulated in", # define title in legend
values = list("DOWN" = down, "UP" = up, "NONE" = none), # define color,
labels = list("DOWN" = cond2, "UP" = cond1, "NONE" = "Non significant"), # define text in legend
breaks=c("DOWN", "UP", "NONE")) + # define the order in legend
scale_y_continuous(trans="log2") + # change scale on y axis
ggtitle(paste0("Volcano plot of comparison\n", cond1," (pos FC) vs ", cond2," (neg FC)\nBenjamini & Hochberg method (",nrow(filter(df, DE != "NONE")) ,"/",ngenes," DE genes)")) +
theme_bw() + theme(legend.position="bottom")
#    theme(plot.title = element_text(size=10),
#          axis.title = element_text(size=10))
# put labels when existing
}else{
p <- ggplot(data=df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(size = 1, aes(color = DE)) +
annotate("rect", xmin=logFCthreshold, xmax=Inf, ymin=-log10(AdjPValthreshold), ymax=Inf, fill=upBg, alpha=0.1) +
annotate("rect", xmin = -Inf, xmax = -logFCthreshold, ymin = -log10(AdjPValthreshold), ymax = Inf, fill=downBg, alpha=0.1) +
geom_hline(aes(yintercept=-log10(AdjPValthreshold))) +
geom_vline(aes(xintercept=logFCthreshold)) +
geom_vline(aes(xintercept=-logFCthreshold)) +
ylab("-log10(DEseq padj)") +
xlab("log2(Fold-Change)") +
xlim(min(df$log2FoldChange), max(df$log2FoldChange)) + # correct x-axis limits
scale_color_manual(name="Up-regulated in", # define title in legend
values = list("DOWN" = down, "UP" = up, "NONE" = none), # define color,
labels = list("DOWN" = cond2, "UP" = cond1, "NONE" = "Non significant"), # define text in legend
breaks=c("DOWN", "UP", "NONE")) + # define the order in legend
ggtitle(paste0("Volcano plot of comparison\n", cond1," (pos FC) vs ", cond2," (neg FC)\nBenjamini & Hochberg method (",nrow(filter(df, DE != "NONE")) ,"/",ngenes," DE genes)")) +
theme_bw() + theme(legend.position="bottom")
#    theme(plot.title = element_text(size=10),
#          axis.title = element_text(size=10))
# put labels when existing
}
if (nrow(dfLabels) > 0) {
p <- p + geom_text_repel(
data = dfLabels,
aes(label = label, fontface="italic"),
#size = 2,
#color = "black", # overide scale_color_manual
point.padding = unit(0.1, "lines")
)
}
return(p)
}
#### CLD CEI ####
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLD <- annot[which(rownames(annot) %in% colnames(CLD_CEI_filt)),]
annot_CLD <- annot_CLD[order(rownames(annot_CLD)),]
annot_CLD$CONDITION <- as.factor(as.character(annot_CLD$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLD_CEI_filt),
colData = annot_CLD,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLD[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLD_CEI_filt[,annot_CLD[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = TRUE)
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = FALSE)
#### CLD LUM ####
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLD <- annot[which(rownames(annot) %in% colnames(CLD_LUM_filt)),]
annot_CLD <- annot_CLD[order(rownames(annot_CLD)),]
annot_CLD$CONDITION <- as.factor(as.character(annot_CLD$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLD_LUM_filt),
colData = annot_CLD,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLD[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLD_LUM_filt[,annot_CLD[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = FALSE)
res_CLD_LUM <- res$CT_ST[which(res$CT_ST$padj < 0.05),]
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = TRUE)
#### CLP CEI ####
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLP <- annot[which(rownames(annot) %in% colnames(CLP_CEI_filt)),]
annot_CLP <- annot_CLP[order(rownames(annot_CLP)),]
annot_CLP$CONDITION <- as.factor(as.character(annot_CLP$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLP_CEI_filt),
colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_CEI_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = FALSE)
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = TRUE)
#### CLP LUM ####
condCol <- "CONDITION"
formulaChar<-paste0("~",condCol)
annot_CLP <- annot[which(rownames(annot) %in% colnames(CLP_LUM_filt)),]
annot_CLP <- annot_CLP[order(rownames(annot_CLP)),]
annot_CLP$CONDITION <- as.factor(as.character(annot_CLP$CONDITION))
dds <- DESeqDataSetFromMatrix(countData = as.data.frame(CLP_LUM_filt),
colData = annot_CLP,
design = formula(formulaChar))
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans =geoMeans)
dds <- DESeq(dds, fitType = "local")
# Differential abundance between conditions
conds<-levels(annot_CLP[,condCol])
compMatrix<-combn(conds,2)
comps<-apply(compMatrix,2,function(x)paste0(x[1],"_",x[2]))
colnames(compMatrix)<-comps
res<-list()
sampleByComp<-list()
for (comp in comps){
cond1 <- compMatrix[1,comp]
cond2<-compMatrix[2,comp]
res[[comp]]<-results(dds, contrast=c(condCol,cond1,cond2), independentFiltering = TRUE,alpha = 0.05)
res[[comp]]$meanInComp<-rowMeans(CLP_LUM_filt[,annot_CLP[,condCol]%in%compMatrix[,comp]])
}
resultat <- as.data.frame(res$CT_ST)
resultat$DE <- "NONE"
up_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange > 2),])
down_res <- rownames(resultat[which(resultat$padj <0.05 & resultat$log2FoldChange < -2),])
resultat[up_res, "DE"] <- "UP"
resultat[down_res, "DE"] <- "DOWN"
resultat$Name <- taxAnnot[rownames(resultat), "Genus2"]
resultat$log2FoldChange <- -resultat$log2FoldChange
#plotVolcano(as.data.frame(res$CT_ST), taxAnnot = taxAnnot, taxonomicRange = "Genus2")
conditions <- list("CT" = "Control", "ST" = "Stress")
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = FALSE)
res_CLD_LUM <- res$CT_ST[which(res$CT_ST$padj < 0.05),]
ggvulcano(resultat, conditions[[1]], conditions[[2]], scale_y_log = TRUE)
shiny::runApp('Docker_MiBiOmics/MiBiOmics_gitlab')
runApp('Docker_MiBiOmics/MiBiOmics_gitlab')
library(ggplot2)
library(shiny)
shiny::runUrl("https://gitlab.univ-nantes.fr/combi-ls2n/mibiomics/repository/master/archive.tar.gz", launch.browser = TRUE)
library(shiny)
runGitHub("MiBiOmics", "jojoh2943", launch.browser = TRUE)
library(shiny)
i <- installed.packages()
i
i <- as.data.frame(installed.packages())
i["htmltools",]
i["htmltools", "version"]
i["htmltools", "Version"]
i["htmltools", "Version"] == 0
i["htmltools", "Version"] == 0.3.6
i["htmltools", "Version"] == "0.3.6"
"htmltools" %in% rownames(installed.packages())
i["htmltools", "Version"] != "0.3.6"
packageurl <- "https://cran.r-project.org/src/contrib/Archive/htmltools/htmltools_0.3.6.tar.gz"
remove.packages(packageurl)
remove.packages("htmltools")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/htmltools/htmltools_0.3.6.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
colorNumeric(palette = "RdBu", 1:-1)
library(leaflet)
colorNumeric(palette = "RdBu", 1:-1)
install.packages()
install.packages("htmltools")
install.packages("htmltools")
sessionInfo()
library(htmltools)
i <- installed.packages()
i["htmltools", "Version"]
i["htmltools"]
i["htmltools",]
if ("htmltools" %in% rownames(installed.packages())){
i <- installed.packages()
if (i["htmltools", "Version"] != "0.3.6"){
remove.packages("htmltools")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/htmltools/htmltools_0.3.6.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
}
}
library("leaflet")
mcoa_CLD
#### HOST ADHERENT ####
transcriptomic <- read.csv("transcriptomic/data/CLP/exprDat_CLP.tsv", header = TRUE, row.names = 1, sep = ",")
metadata <- read.csv("microbiota/data/metadata_diversity_all.csv", header = TRUE, row.names = 1, sep = ",")
taxAnnot <- read.csv("microbiota/data/tax_annotation_DS.csv", header = TRUE, row.names = 1, sep=",")
OTU_CLDLUM <- read.csv("microbiota/data/CLP_LUM_5757_OTU_table_DS.csv", header = TRUE, row.names = 1, sep = ",")
OTU_CLDCEI <- read.csv("microbiota/data/CLP_CEI_2595_OTU_table_DS.csv", header = TRUE, row.names = 1, sep = ",")
colnames(OTU_CLDCEI) <- substr(colnames(OTU_CLDCEI), 1, nchar(colnames(OTU_CLDCEI))-3)
metadata <- metadata[grepl("LUM", rownames(metadata)),]
rownames(metadata) <- substr(rownames(metadata), 1, nchar(rownames(metadata))-3)
OTU_CLDCEI <- OTU_CLDCEI[, intersect(colnames(OTU_CLDCEI), colnames(transcriptomic))]
transcriptomic <- transcriptomic[, intersect(colnames(OTU_CLDCEI), colnames(transcriptomic))]
#### DATA PROCESSING ####
OTU_CLDCEI <- OTU_CLDCEI[,grepl("CT", colnames(OTU_CLDCEI))]
transcriptomic <- transcriptomic[,grepl("CT", colnames(transcriptomic))]
OTU_CLDCEI_filtrated <- filtr_prev(OTU_CLDCEI, Prevalence = 2, samples_are_rows = FALSE, percentage = FALSE)
OTU_CLDCEI_normalized <- apply(OTU_CLDCEI_filtrated, 1, TSS.divide)
OTU_CLDCEI_transformed = as.data.frame(t(clr(OTU_CLDCEI_normalized)))
#transcriptomic_normalized <- apply(transcriptomic, 1, TSS.divide)
#transcriptomic_normalized_transformed <- as.data.frame(t(clr(transcriptomic_normalized)))
transcriptomic <- as.data.frame(clr(transcriptomic))
metadata <- metadata[colnames(OTU_CLDCEI_transformed),]
rownames(OTU_CLDCEI_transformed) <- paste("B_", rownames(OTU_CLDCEI_transformed), sep = "")
rownames(transcriptomic) <- paste("A_", rownames(transcriptomic), sep = "")
# PERFORM MCOA (Multiple co_inertia analysis)
My2Layers <- list(transcriptomic, OTU_CLDCEI_transformed)
mcoa_CLD <- mcia(My2Layers, cia.nf = 2)
plot(mcoa_CLD, axes=1:2, phenovec=metadata$ASF.permea.ex.vivo.CD, sample.lab=FALSE)
# The 3 layers will be associated using multiple co-inertia
#### LIBRARY ####
library(tidyverse)
library(omicade4)
library(compositions)
library(ggrepel)
source("C:/Users/Boulot/Documents/These/myFunctions.R")
#### CONFIGURATION AND DATA UPLOAD
setwd("C:/Users/Boulot/Documents/These/preprojet")
col=brewer.pal(9,"Blues")
col=brewer.pal(9,"RdBu")
library(RColorBrewer)
col=brewer.pal(9,"RdBu")
col
as.matrix(CLD_OTUTable[10:20, 10:20])
mat <- as.matrix(CLD_OTUTable[10:20, 10:20])
col(mat)
col(c(mat))
col(c(mat[1,]))
col(c(CLD_OTUTable[1,]))
col(0.123)
pal=brewer.pal(9,"RdBu")
pal(c(CLD_OTUTable[1,]))
brewer.pal(c(CLD_OTUTable[12,]), "RdBu")
brewer.pal(c(CLD_OTUTable), "RdBu")
remove.packages("leaflet")
remove.packages("htmltools")
runApp('~/Docker_MiBiOmics/MiBiOmics')
